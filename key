

import 'package:flutter/material.dart';
import 'dart:math' as math;
class ConvexPainter extends CustomPainter {
  final _paint = Paint();
  final _shadowPaint = Paint();
  late ConvexNotchedRectangle _shape;

  final double width;

  final double height;
  final double top;

  final Animation<double> leftPercent;
  ConvexPainter({
    required this.top,
    required this.width,
    required this.height,
    this.leftPercent = const AlwaysStoppedAnimation<double>(0.5),
    Color color = Colors.white,
    Color shadowColor = Colors.black38,
    double sigma = 2,
  }) : super(repaint: leftPercent) {
    _paint.color = color;
    try {
      _shadowPaint
        ..color = shadowColor
        ..maskFilter = MaskFilter.blur(BlurStyle.outer, sigma);
    } catch (e, s) {
      debugPrintStack(label: 'ElevationError', stackTrace: s);
    }
    _shape = const ConvexNotchedRectangle(radius:  0);
  }

  @override
  void paint(Canvas canvas, Size size) {
    var host = Rect.fromLTWH(0, 0, size.width, size.height);
    var percent = leftPercent.value;
    var guest =
    Rect.fromLTWH(size.width * percent - width / 2, top, width, height);
    var path = _shape.getOuterPath(host, guest);
    canvas.drawPath(path, _shadowPaint);
    canvas.drawPath(path, _paint);
  }

  @override
  bool shouldRepaint(ConvexPainter oldDelegate) {
    return oldDelegate.leftPercent.value != leftPercent.value ||
        oldDelegate._paint != _paint;
  }
}
class ConvexNotchedRectangle extends NotchedShape {
  final double radius;

  const ConvexNotchedRectangle({this.radius = 0});

  @override
  Path getOuterPath(Rect host, Rect? guest) {
    if (guest == null || !host.overlaps(guest)) return Path()..addRect(host);
    final notchRadius = guest.width / 2.0;

    return (Path()
      ..moveTo(host.left, host.top)
      ..lineTo(-13.5, 0.0)
      ..quadraticBezierTo(1.5, 0, 13.4, -10)
      ..arcToPoint(
        const Offset(66.6, -10.0),
        radius: Radius.circular(notchRadius),
        clockwise: true,
      )
      ..quadraticBezierTo(78.5, 0, 93.5, 0) // Mirrored quadratic curve
      ..lineTo(host.right, host.top)
      ..close());
  }
}
